name: deploy-command
on:
  repository_dispatch:
    types: [deploy-command]

jobs:
  publish-package:
    name: Publish Package
    runs-on: ubuntu-latest
    environment:
      name: test.pypi.org
    steps:
      - name: Create deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments
        env:
          INPUT_REPOSITORY: ${{ github.repository }}
          INPUT_REF: ${{ github.event.client_payload.pull_request.head.ref }}
          INPUT_ENVIRONMENT: test.pypi.org
          INPUT_AUTO_MERGE: false
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Set deployment status to in progress
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: test.pypi.org
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          INPUT_REPOSITORY: ${{ github.repository }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13.1

      - name: Install Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: 1.8.4

      - name: Install dependencies
        run: poetry install --no-dev

      - name: Create custom version
        id: create-custom-version
        run: |
          pr_version=$(poetry version -s)a$(date +%s)
          echo "The custom version is ${pr_version}"
          echo "pr_version=${pr_version}" >> "$GITHUB_OUTPUT"

      - name: Set new version
        run: poetry version ${{ steps.create-custom-version.outputs.pr_version }}

      - name: Build package
        run: poetry build

      - name: Add test.pypi.org to Poetry
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.API_TOKEN }}

      # - name: Publish package
      #   run: poetry publish -r testpypi

      - name: Write comment in Pull Request
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            Pull Request has been deployed on test.pypi.org: [${{ steps.create-custom-version.outputs.pr_version }}](https://test.pypi.org/project/signalbot/${{ steps.create-custom-version.outputs.pr_version }}/) :rocket: You can test the package by running
            ```bash
            pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple signalbot==${{ steps.create-custom-version.outputs.pr_version }}
            ```

      - name: Set deployment status to success
        id: successful_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: test.pypi.org
          environment_url: https://test.pypi.org/project/signalbot/${{ steps.create-custom-version.outputs.pr_version }}/
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: success
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          INPUT_REPOSITORY: ${{ github.repository }}

      - name: Set deployment status to failure
        id: failed_deployment
        uses: octokit/request-action@v2.x
        if: failure()
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: test.pypi.org
          environment_url: https://test.pypi.org/project/signalbot/${{ steps.create-custom-version.outputs.pr_version }}/
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: failure
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          INPUT_REPOSITORY: ${{ github.repository }}
